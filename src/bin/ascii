#!/usr/bin/env ruby
# encoding: utf-8

require 'pp'
require 'csv'
require 'yaml'
require 'thor'
require 'euro'
require 'paint'
require 'luigi'
require 'logger'
require 'textboxes'
require 'hash-graft'

$logger = Logger.new STDOUT
$logger.progname = "ascii-invoicer"

begin
  $SCRIPT_PATH = File.split(File.expand_path(File.readlink(__FILE__)))[0]
rescue
  $SCRIPT_PATH = File.split(File.expand_path(__FILE__))[0]
end
$GEM_PATH = File.split($SCRIPT_PATH)[0]
require "#{$GEM_PATH}/lib/ascii_invoicer"

# initializing settings
settingsmanager = SettingsManager.new({
  :homedir_path  => File.join(Dir.home, ".ascii-invoicer.yml"),
  :template_path => File.join($GEM_PATH, "/settings/settings_template.yml"),
  :default_path  => File.join($GEM_PATH, "/settings/default-settings.yml")
})

$SETTINGS = settingsmanager.settings

## path to the source code
$SETTINGS.script_path = $SCRIPT_PATH
$SETTINGS.gem_path = $GEM_PATH

## Version of the software
$SETTINGS.version = $VERSION = AsciiInvoicer::VERSION

## path to the project File, here we expand the "~"
$SETTINGS.path = File.expand_path $SETTINGS.path


## "security"
#error "settings:editor is an elaborate string: \"#{$SETTINGS.editor}\"!\nDANGEROUS!" if $SETTINGS.editor.include? " "
$logger.error "settings:latex is an elaborate string: \"#{$SETTINGS.latex}\"!\nDANGEROUS!" if $SETTINGS.latex.include? " "
$logger.error "settings:output_path is an elaborate string: \"#{$SETTINGS.output_path}\"!\nDANGEROUS!" if $SETTINGS.output_path.include? " "


## bootstraping the plumber, first run creates all folders
unless File.exists? $SETTINGS.path
  $logger.fatal "path #{$SETTINGS.path} does not exists"
  exit
end
$PLUMBER = Luigi.new $SETTINGS, InvoiceProject
$PLUMBER.create_dir :storage unless $PLUMBER.check_dir :storage
$PLUMBER.create_dir :working unless $PLUMBER.check_dir :working
$PLUMBER.create_dir :archive unless $PLUMBER.check_dir :archive
$PLUMBER.create_dir :templates unless $PLUMBER.check_dir :templates
$logger.error "template not found!\n#{$PLUMBER.dirs[:templates]}" unless $PLUMBER.check_dir :templates





## here coms thor
class Commander < Thor
  include Thor::Actions
  include AsciiInvoicer
  include AsciiMixins


  package_name "ascii invoicer"
  #argument :first, :type => :numeric
  map "-l"    => :list
  map "l"     => :list
  map "ls"    => :list
  map "dir"   => :list
  map "show"  => :display
  map "-d"    => :display
  map "close" => :archive
  map "-i"    => :invoice
  map "-o"    => :offer
  map "-V"    => :version
  map "config" => :settings
  map "history" => :log
  #map "-e"  => :edit #depricated

  class_option :verbose,   :aliases=> "-v", :type => :boolean, :default => $SETTINGS.verbose, :desc => "Change default in #{$SETTINGS.settings_homedir_path}"
  #class_option "keep-log", :aliases=> "-k", :type => :boolean

  no_commands{
    def open_projects(names, options)
      $SETTINGS.verbose = true if options[:verbose]
      if options[:file]
        return [InvoiceProject.new({path => options[:file], settings => $SETTINGS})]

      else
        if options[:all]
          available_projects = $PLUMBER.open_projects_all()
        elsif options[:archive]
          available_projects = $PLUMBER.open_projects_archive(options[:archive])
        else
          available_projects = $PLUMBER.open_projects_working()
        end

        projects = names.map{|name|
          if name.class == String and name =~ /^\d*$/
            available_projects[ (name.to_i - 1) ]
          else
            (available_projects.lookup_by_name name) + (available_projects.lookup_by_index name)
          end
        }.flatten.uniq
        if projects.count < 1
          $logger.error "Nothing found, containing #{names}"
          exit
        end
        return projects.select{|p|p}

      end
    end

    def render_projects(projects, type, stdout = false)
      puts "% RENDERING"
      projects.each{|project| project.create_tex(type, stdout) unless project.nil? }
    end
  }


  desc "new NAME", "Creating a new project" 
    method_option :dont_edit, :type=>:boolean, :aliases => "-d",
      :lazy_default=> true, :required => false, :desc => "do not edit a new file after creation"
    method_option :template, :type=>:string, :aliases => "-t",
      :default => "default", :required => false, :desc => "specify a template"
    method_option :editor, :type => :string, :aliases => '-e',
      :default => $SETTINGS.editor, :desc => "specify which editor to use, see #{$SETTINGS.settings_homedir_path}"
  def new(name)
    template = options[:template].to_sym
    unless $PLUMBER.templates.keys.include? template
      $logger.fatal "There is not such template \"#{template}\" "
      exit
    end
    
    project = $PLUMBER.new_project name, template
    if project
      puts project.path
      puts "creating a new project name #{name}" if project
      edit_files $PLUMBER.get_project_file_path name unless options[:dont_edit]
    else
      puts "was not able to create #{name}"
    end
  end


  desc "edit NAMES", "Edit project"
    method_option :settings, :type=>:boolean, :aliases => '-s',
      :lazy_default=> true, :required => false, :desc => "edit settings"
    method_option :archive,
      :type=>:numeric, :aliases => "-a", :default => nil,
      :lazy_default=> Date.today.year, :required => false, :desc => "Open File from archive YEAR"
    method_option :editor, :type => :string, :aliases => '-e',
      :default => $SETTINGS.editor, :desc => "specify which editor to use, see #{$SETTINGS.settings_homedir_path}"
    method_option :template,
      :type=>:string, :aliases => "-t", :default => nil,
      :lazy_default=> Date.today.year, :required => false, :desc => "Edit a template file"

  def edit( *names )
    if options[:settings]
      paths = [ $SETTINGS.settings_homedir_path ]
    elsif options[:template]
      path = $PLUMBER.templates[ options[:template].to_sym ]
      paths = []
      paths = [path] if File.exists? path
    else
      projects = open_projects names, options
      paths= projects.map{ |project| project.path }
      puts paths
    end

    if paths.size > 0
      edit_files paths, options[:editor]
    else
      puts "nothing found (#{names})"
    end
  end



  desc "list", "List current Projects"
    method_option :archive,
      :type=>:numeric, :aliases => "-a",
      :lazy_default=> Date.today.year, :required => false, :desc => "list archived projects"
    method_option :archives,
      :type=>:boolean,
      :lazy_default=> true, :required => false, :desc => "lists all years for which there are archives"
    method_option :all, :type=>:boolean,
      :lazy_default=> true, :required => false, :desc => "lists all projects, ever"
    method_option :templates, :type=>:boolean,
      :lazy_default=> true, :required => false, :desc => "lists all templates"
    method_option :paths, :type=>:boolean, :aliases => '-p',
      :lazy_default=> true, :required => false, :desc => "list paths to .yml files"


    method_option :csv, :type=>:boolean, 
      :lazy_default=> true, :required => false, :desc => "output as csv"
    method_option :sort, :type=>:string,
      :required => false, :desc => "sort by [date | index | name | manager]",
      :enum => ['date' , 'index', 'name', 'manager']

    method_option :final, :type=>:boolean,
      :lazy_default=> true, :required => false, :desc => "list shows final sum"

    method_option :caterers, :type=>:boolean,
      :lazy_default=> true, :required => false, :desc => "list caterers"

    method_option :blockers, :type=>:boolean, :aliases => '-b',
      :lazy_default=> true, :required => false, :desc => "list blockers"

    method_option :errors, :type=>:boolean, :aliases => '-e',
      :lazy_default=> true, :required => false, :desc => "list errors"

    method_option :simple, :type=>:boolean, :aliases => '-s',
      :lazy_default=> true, :required => false, :desc => "overrides the verbose setting"

    method_option :colors, :type=>:boolean, :aliases => '-c', :default => $SETTINGS.colors,
      :lazy_default=> true, :required => false, :desc => "overrides the colors setting"

    method_option :filter, :type=>:hash, :aliases => '-f',
      :required => false, :desc => "filter by manager, caterer etc (experimental)"

    method_option :no_colors, :type=>:boolean, :aliases => '-n',
      :lazy_default=> true, :required => false, :desc => "overrides the colors setting"

    method_option :edit, :type=>:array,
      :required => false, :desc => "open all listed files for edit"

  def list
    hash            = {}
    hash[:verbose]  = (options[:verbose] and !options[:simple])
    hash[:colors]   = (options[:colors] and !options[:no_colors])
    hash[:errors]   = options[:errors]
    hash[:blockers] = options[:blockers]
    hash[:caterers] = options[:caterers]
    hash[:final]    = options[:final]

    if not options[:sort].nil? and [:date, :name, :index].include? options[:sort].to_sym
      sort = options[:sort].to_sym
    else
      sort = :date
    end

    if options[:all]
      projects = $PLUMBER.open_projects_all() #TODO
    elsif options[:archives]
      puts $PLUMBER.map_archive_years.keys
      return
    elsif options[:templates]
      puts $PLUMBER.templates.keys
      return
    elsif options[:archive]
      projects = $PLUMBER.open_projects_archive(options[:archive], sort)
    else
      projects = $PLUMBER.open_projects_working(sort)
    end

    if options[:filter]
      projects = $PLUMBER.filter_by projects, options[:filter]
    end

    if options[:csv] 
      projects = $PLUMBER.sort_projects(projects, :index)
      print_project_list_csv projects
    elsif options[:paths] 
      print_project_list_paths projects
    elsif options[:yaml] 
      print_project_list_yaml projects
    else
      print_project_list(projects, hash)
    end

    if options[:edit]
      all_paths= projects.map { |project| project.path }

      paths = options[:edit].map{|index| all_paths[index.to_i-1] }
      puts paths

      if paths.size > 0
        edit_files paths, options[:editor]
      else
        puts "nothing found (#{names})"
      end
    end
  end

  desc "templates", "List or add templates"
    method_option :add, :type=>:boolean,
      :lazy_default=> true, :required => false, :desc => "Adds template changes to index just like ascii add does to projects."

  def templates
    if options[:add]
      path = $PLUMBER.dirs[:templates]
      $PLUMBER.git_update_path(path) if $PLUMBER.open_git()
    else
      puts $PLUMBER.templates.keys
    end
  end

  desc "csv", "Equal to: ascii list --all --csv --sort=index --filter event/date:#{Date.today.year}"
  def csv
    invoke :list, [], csv:true, all:true, sort:"index", filter:{"event/date"=>Date.today.year.to_s}# where is this documented
  end

  desc "whoami", "Invoke settings --show manager_name"
  def whoami
    invoke :settings, [], show:"manager_name"
  end

  desc "calendar", "Create a calendar from all caterings"
  def calendar
    print_project_list_ical $PLUMBER.open_projects_all()
  end




  desc "archive NAME", "Move project to archive"
    method_option :force,:type=>:boolean,
      :lazy_default=> true, :required => false,
      :desc => "Force archiving projects that are invalid."
  def archive( *names )
    projects = open_projects names, options
    project = projects[0]
    return false unless project

    year   = project.date.year
    prefix = project.data[:invoice][:number]
    prefix ||= ""
    prefix  += "canceled" if project.data[:canceled]

    puts options

    unless project.validate(:archive) or options[:force] or project.data[:canceled]
      $logger.error "\"#{project.name}\" contains errors\n(#{project.errors.join(',')})"
    else
      new_path = $PLUMBER.archive_project project, Date.today.year, prefix
      puts new_path
    end
  end

  desc "reopen YEAR NAME", "reopen an archived project"
  def reopen(year, name)
    projects = $PLUMBER.open_projects_archive year
    project = projects.lookup_by_name name
    if project.count > 1
      $logger.error "Ambigous results"
      puts project
      exit
    else
      project = project[0]
      puts project.path
    end

    #unless $PLUMBER.unarchive_project project, year
    #  $logger.error "Can't unarchive #{name}, checks names of current projects for duplicates!"
    #end
  end






  desc "display NAMES", "Shows information about a project in different ways"
    method_option :archive,
      :type=>:numeric, :aliases => "-a",
      :default => nil,
      :lazy_default=> Date.today.year,
      :required => false,
      :desc => "Select File from archive YEAR"
    method_option :all, :type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => "Select File from any archive and current working directory "
    method_option :name, :type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => "Display only the name"
    method_option :offer, :type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => "Display the offer"
    method_option :invoice, :type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => "Display the invoice"
    method_option :products, :type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => "Display only the products for the --offer or --invoice"
    method_option :caterers, :type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => "Display Caterers"
    method_option :raw,:type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => ""
    method_option :costs,:type=>:boolean,
      :default=> false, :lazy_default=> true, :required => false,
      :desc => ""
    method_option :pp, :type=>:string, :banner => "key",
      :default => nil, :lazy_default=> "", :required => false,
      :desc => "output key or all with pp"
#    method_option :yaml, :type=>:string, :banner => "key",
#      :default => nil, :lazy_default=> "", :required => false,
#      :desc => "output key or all as yaml"
    method_option :cal, :type=>:boolean,
      :default => nil, :lazy_default=> "", :required => false,
      :desc => "output key or all as ical event[s]"
  def display(*names)
    projects = open_projects names, options

    projects.each{ |project|
      $logger.error("No project found!") if project.nil?
      unless options[:cal] or options[:yaml] or options[:costs] or options[:caterers] or options[:invoice] or options[:offer] or options[:products]
        fallback= true
      end

      if not options[:yaml].nil?
        if options[:yaml] == ''
          puts project.data.to_yaml
        else
          puts project.data.get_path(options[:yaml]).to_yaml
        end
      elsif options[:name]
        puts project.name
      elsif options[:raw]
        raw = project.raw_data
        raw.delete "cataloge"
        puts raw.to_yaml
      elsif not options[:pp].nil?
        if options[:pp] == ''
          pp project.data
        else
          pp project.data.get_path(options[:pp])
        end
      else
        if options[:products]
          puts display_products(project, :offer  )
          puts display_products(project, :invoice) if options[:invoice]
        else
          puts display_all(project, :offer  )      if options[:offer  ] 
          puts display_all(project, :invoice)      if options[:invoice] or fallback
        end
        print_project_list_ical [project]          if options[:cal]
        if options[:caterers]
          print "#{project.name}:".ljust(35)         if names.length > 1
          if project.data[:hours][:caterers]
            puts project.data[:hours][:caterers].map{|name, hours| "#{name} (#{hours})"}.join(", ")
          else
            puts "Caterers is empty"
          end
        end
      end
    }
  end

  desc "offer NAMES", "Create an offer from project"
    method_option :archive,
      :type=>:numeric, :aliases => "-a",
      :default => nil,
      :lazy_default=> Date.today.year,
      :required => false,
      :desc => "Open File from archive YEAR"
    method_option :stdout,
      :type=>:numeric, :aliases => "-s",
      :lazy_default=> true,
      :required => false,
      :desc => "print tex to stdout"
  def offer(*names)
    projects = open_projects names, options
    render_projects projects, :offer, options[:stdout]
  end

  desc "invoice NAMES", "Create an invoice from project"
    method_option :archive,
      :type=>:numeric, :aliases => "-a",
      :default => nil,
      :lazy_default=> Date.today.year,
      :required => false,
      :desc => "Open File from archive YEAR"
    method_option :stdout,
      :type=>:numeric, :aliases => "-s",
      :lazy_default=> true,
      :required => false,
      :desc => "print tex to stdout"
  def invoice( *names)
    projects = open_projects names, options
    render_projects projects, :invoice, options[:stdout]
  end






  desc "status", "Git Integration"
  def status
    $PLUMBER.git_status() if $PLUMBER.open_git()
  end


  desc "add NAMES", "Git Integration"
  def add *names
    projects = open_projects names, options
    projects.each {|project|
      path = project.project_folder
      $PLUMBER.git_update_path(path) if $PLUMBER.open_git()
    }
    status()
  end

  desc "commit", "Git Integration"
    method_option :message,
      :type=>:string, :aliases => "-m", :default => nil,
      :lazy_default=> Date.today.year, :required => true,
      :desc => "Open File from archive YEAR"
  def commit 
    $PLUMBER.git_commit(options[:message]) if $PLUMBER.open_git()
  end

  desc "push", "Git Integration"
  def push
    $PLUMBER.git_push() if $PLUMBER.open_git()
  end

  desc "pull", "Git Integration"
  def pull
    $PLUMBER.git_pull() if $PLUMBER.open_git()
  end

  desc "log", "Git Integration"
    method_option :count,
      :type=>:numeric, :aliases => "-c",
      :default => 30,
      :lazy_default=> 1000, 
      :required => false,
      :desc => "Max count of history entries"
  def log 
    $PLUMBER.git_log(options[:count]) if $PLUMBER.open_git()
  end





  desc "settings", "View settings"
    method_option :edit,
      :type=>:boolean, :aliases => "-e",
      :lazy_default=> false,
      :required => false,
      :desc => "edit your settings"
    method_option :show,
      :type=>:string, :aliases => "-s",
      :required => false,
      :desc => "show a specific settings value"

  def settings

    if options[:edit]
      edit_files $SETTINGS.settings_homedir_path
    elsif options[:show]
      value = $SETTINGS.get_path options[:show]
      if value.class == Hash or value.class == Array
        puts value.to_yaml
      elsif value.class == Hashr
        puts value.to_hash.to_yaml
      else
        puts value
      end
    else
      puts $SETTINGS.to_hash.to_yaml
    end
    #pp $SETTINGS
  end

  desc "path", "Return projects storage path"
  method_option :templates, :type=>:boolean, :aliases => '-t',
    :lazy_default=> true, :required => false, :desc => "returns templates path"
  method_option :output, :type=>:boolean, :aliases => '-o',
    :lazy_default=> true, :required => false, :desc => "returns output path"
  method_option :script, :type=>:boolean,
    :lazy_default=> true, :required => false, :desc => "returns script path"
  def path
    if options[:script]
      puts File.split($GEM_PATH)[0]
    elsif options[:output]
      puts File.expand_path File.join $SETTINGS.output_path
    elsif options[:templates]
      puts $PLUMBER.dirs[:templates]
    else
      puts File.join $SETTINGS.path, $SETTINGS.dirs.storage
    end
  end

  desc "version", "Display version"
    method_option :changed_files, :type=>:boolean, :aliases => '-c',
      :lazy_default=> true, :required => false, :desc => "show changed files"
    method_option :fetch, :type=>:boolean, :aliases => '-f',
      :lazy_default=> true, :required => false, :desc => "update new code (FETCH ONLY != pull)"
  def version
    puts $VERSION
  end
end

Commander.start
